#! /bin/bash
ROOT=`cd $(dirname $0); pwd`
CONFDIR=$ROOT/config

source ./config/env.conf

# 定义erlang vm选项
ERL=/usr/local/bin/erl
DATETIME=`date "+%Y%m%d-%H%M%S"`
export ERL_CRASH_DUMP=$ROOT/erl_crash_$DATETIME.dump
export ERL_MAX_PORTS=102400
export ERL_MAX_ETS_TABLES=10000
export HOME=$ROOT
export LOG_DIR=$ERRLOGDIR
SYSTEM_CONF_FILE=$CONFDIR/game_server

NET_TICKTIME=600

# 运行的程序及控制文件
APP_MOD=main
APP_CTL=game_ctl
# define additional environment variables
# 修改引用目录
if [ "$EBINS" == "" ]; then
    EBINS="$ROOT/ebin"
fi

STATUS_SUCCESS=0    # 成功
STATUS_NORUN=1      # 未运行
STATUS_USAGE=2      # 使用错误
STATUS_BADRPC=3     # rpc调用错误
STATUS_ERROR=4      # 其它错误
STATUS_STARTING=5   # 正在开服中
STATUS_RUNNING=6    # 运行中
STATUS_STOPING=7    # 正在关服中

CTL_STATUS_NORUN=0
CTL_STATUS_STARTING=1
CTL_STATUS_RUNNING=2
CTL_STATUS_STOPING=3
CTL_STATUS_ERROR=4

# 打印错误
error() {
    echo -e "[1;41m[错误][`date +"%F %T"`][0m [${ERLANG_NODE}]$1"
    exit 1
}

# 打印信息
echo2() {
    echo -e "[1;42m[操作][`date +"%F %T"`][0m [${ERLANG_NODE}]$1"
}

# 打印信息(不换行)
echo2_n() {
    echo -n -e "[1;42m[操作][`date +"%F %T"`][0m [${ERLANG_NODE}]$1"
}

# 打印警告
warn() {
    echo -e "[1;43m[警告][`date +"%F %T"`][0m [${ERLANG_NODE}]$1"
}

# 使用说明
usage ()
{
    echo ""
    echo "用法:"
    echo "$0 ACTION [OPTION]"
    echo "ACTION:"
    echo "  live            交互方式启动"
    echo "  start           后台方式启动"
    echo "  async_start     后台方式启动(异步)" 
    echo "  status          获取后台运行状态"
    echo "  attach          通过Erlang shell连接后台运行节点"
    echo "  stop            立即停止节点(同步)"
    echo "  sync_stop       同步停止节点(同步)"
	echo "  safe_stop       同步停止节点(缓存同步到数据库)"
    echo "  restart         重启节点"
	echo "  hotup          	执行热更新"
    echo "  config          重新加载配置"
    echo "  count           获取在线人数"
    echo "  version         获取版本信息"
    echo "  check_db        检查游戏服数据状态[未支持]"
    echo ""
    echo "OPTION:"
    echo "  -h, --help              显示本信息"
    echo "  -s, --smp=true          是否使用smp(true|false,默认为true)"
    echo "  -c, --cookie=Cookie     节点cookie(默认\"\")"
    echo "  -f, --conf=Conf         指明使用的配置文件(默认game.conf)"
    echo ""
}

# 修改ulimit
change_ulimit() {
    if ! ulimit -HSn 102400 2> /dev/null ; then
        ## error "请确保具有root权限"
        echo "请确保具有root权限"
    fi
}

# 查询运行中节点的信息
rpc() 
{
    $ERL \
      $NAME_FLAG ${CTL_NAME}_ctl@$HOST \
      -noinput \
      -pa $EBINS \
	    -config $SYSTEM_CONF_FILE \
      -setcookie ${COOKIE} \
      -s ${APP_CTL} -extra $ERLANG_NODE $@
}

# 打印rpc返回信息
print_rpc_return ()
{
    case $1 in
    $STATUS_SUCCESS) 
        echo ""
        ;;
    $STATUS_NORUN) 
        warn "未运行!"
        ;;
    $STATUS_USAGE) 
        error "命令不支持! $0 -h查看帮助"
        ;;
    $STATUS_BADRPC) 
        error "RPC发生错误"
        ;;
    $STATUS_ERROR) 
        error "请求发生错误"
        ;;
    $STATUS_STARTING) 
        echo2 "正在开服中"
        ;;
    $STATUS_RUNNING) 
        echo2 "运行中"
        ;;
    $STATUS_STOPING) 
        echo2 "正在停服中"
        ;;
    *)
        error "未知命令! $0 -h查看帮助"
    esac
    exit $1
}

# 判断节点是否运行
is_started () 
{
    rpc status
    result=$?
    if [  "$result" = "$STATUS_RUNNING" ]; then
        return 0
    fi
    return $result
}

# 判断节点是否运行
is_stop () 
{
    rpc status
    result=$?
    if [  "$result" = "$STATUS_NORUN" ]; then
        return 0
    fi
    return $result
}

# 判断节点是否crash
is_crashed() 
{
    if [ -f ${ERL_CRASH_DUMP} ]; then
        return 0
    fi
    return 1
}

# start interactive server
live ()
{
    change_ulimit
    $ERL \
      $NAME_FLAG $ERLANG_NODE \
      -pa $EBINS \
      -setcookie ${COOKIE} \
	    -config ${SYSTEM_CONF_FILE} \
      -s ${APP_MOD} start \
      $ERLANG_OPTS --extra $ARGS "$@"
}

# 启动server
start ()
{
    change_ulimit
    /bin/rm -rf logs
    ensure_log_dir
    if is_started; then
        warn "节点$ERLANG_NODE已经启动"
        exit 0
    fi

    echo2_n "开始启动" 
    # 等待1秒钟
    sleep 1
    $ERL \
      $NAME_FLAG $ERLANG_NODE \
      -noinput -detached \
      -hidden \
      -pa $EBINS \
      -setcookie ${COOKIE} \
      -kernel error_logger silent \
      -sasl sasl_error_logger \{file,\"$SASL_LOG\"\} \
	    -config ${SYSTEM_CONF_FILE} \
      -kernel inet_dist_listen_min 41000 inet_dist_listen_max 42000 \
	  -kernel net_ticktime $NET_TICKTIME \
      -s ${APP_MOD} start \
      $ERLANG_OPTS $ARGS "$@"
    
    if [ "$1" = "async" ]; then
        echo ""
        echo2 "启动中，请稍候通过$0 status检测"
        [ -f normal.stop ] && /bin/rm normal.stop
        exit 0
    fi

    RETRY=0
    while true; do
        if [ $? -ne 0 ]; then
            echo ""
            error "启动失败:$?"
        else
            if is_started; then
                break
            fi
            if is_crashed; then
                echo ""
                error "启动失败,发生crash!"
            else
                let RETRY++
                echo -n "."
                sleep 1
            fi
            if [ $RETRY -gt 180 ];then
                error "启动超时"
            fi
        fi
    done
    echo ""
    [ -f "normal.stop" ] && /bin/rm normal.stop
    echo2 "启动成功"
}

# 获取状态
status ()
{
    if is_started; then
        echo2 "运行中"
    else
        print_rpc_return $?
    fi  
}

# 连接到节点内
attach ()
{
    if ! is_started; then
        error "[$ERLANG_NODE]未启动"
    fi
    $ERL \
      $NAME_FLAG ${NAME}_attach@$HOST \
      -setcookie ${COOKIE} \
	  -kernel net_ticktime $NET_TICKTIME \
      -remsh $ERLANG_NODE \
      $ERLANG_OPTS $ARGS "$@"
}

# 停止节点
stop ()
{
    if rpc stop ; then
        echo2 "停止"
        touch normal.stop
    else
        print_rpc_return $?
    fi  
}

# 停止节点
sync_stop ()
{
    if rpc stop ; then
        echo2 "停止"
        RETRY=0
        while true; do
            if is_stop; then
                break
            elif [ $RETRY -gt 30 ];then
                break
            fi
            let RETRY++
            echo -n "."
            sleep 1
        done
        echo ""
        echo2 "停止成功"
        touch normal.stop
    else
        print_rpc_return $?
    fi  
}

# 停止节点，缓存数据同步到数据库
safe_stop ()
{
    if rpc safe_stop ; then
        echo2 "停止"
        RETRY=0
        while true; do
            if is_stop; then
                break
            elif [ $RETRY -gt 30 ];then
                break
            fi
            let RETRY++
            echo -n "."
            sleep 1
        done
        echo ""
        echo2 "停止成功"
        touch normal.stop
    else
        print_rpc_return $?
    fi  
}

# 重启节点
restart ()
{
    sync_stop
    sleep 3
    start
}

# 执行热更新
hotup ()
{
    if rpc hotup; then
        echo2 "热更新成功"
    else
        error "热更新失败"
    fi  
}

# 重新加载配置
config ()
{
    if rpc reload_config; then
        echo2 "热更配置成功"
    else
        error "热更配置失败"
    fi  
}

# 获取在线人数
count ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    rpc count
}


# 获取版本信息
version ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    rpc version
}

# 数据库状态
check_db ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    if rpc check_db;then
        echo2 "数据库连接成功"
    else
        error "数据连接失败"
    fi
}



# parse command line parameters
while [ $# -ne 0 ] ; do
    PARAM=$1
    shift
    case $PARAM in
        --) break ;;
        --cookie|-c) COOKIE=$1 ; shift ;;
        --conf|-f) 
            #GAME_CONF_FILE=$CONFDIR/${1##*/};
            GAME_CONF_FILE=$1;
            export GAME_CONF_FILE=${GAME_CONF_FILE}; 
            shift ;;
        --help|-h) usage; exit 0;;
        *) ARGS="$ARGS $PARAM" ;;
    esac
done

# 节点名
ERLANG_NODE=${NAME}@${HOST}
TIMESTAMP=`date "+%Y%m%d-%H%M%S_%N"`
CTL_NAME=${NAME}"_"${TIMESTAMP}
NAME_FLAG=-name

if [ -f "./smp" ];then
    SMP=`cat ./smp`
else
    SMP="enable"
fi

ERLANG_OPTS="-connect_all false +K true -smp $SMP +P 5000000 \
    +t 16777216 +fnu +hms 8192 +hmbs 8192 +zdbbl 81920 -v"

# makesure the logs dir exists
ensure_log_dir()
{
    if [ ! -d $ERRLOGDIR ]; then
        mkdir -p $ERRLOGDIR || (echo "make $ERRLOGDIR error!"; exit 1)
    fi
    SASL_LOG=$ERRLOGDIR/${ERLANG_NODE}_${DATETIME}.sasl
}


case $ARGS in
    '') usage;;
    ' live') live;;
    ' start') start sync;;
    ' async_start') start async;;
    ' status') status;;
    ' attach') attach;;
    ' stop') stop;;
    ' sync_stop') sync_stop;;
	' safe_stop') safe_stop;;
    ' restart') restart;;
    ' count') count;;
    ' config') config;;
	' hotup') hotup;;
    ' version') version;;
    ' check_db') check_db;;
    *) usage; exit 1
esac
